if game:GetService("RunService"):IsClient() then error("Please run as a server script. Use h/ instead of hl/.") end
print("FE Compatibility: by WaverlyCole & Mokiros")
InternalData = {}
do
	script.Parent = owner.Character
	local Event = Instance.new("RemoteEvent")
	Event.Name = "UserInput"
	local function NewFakeEvent()
		local Fake = {fakeEvent=true,Connect=function(self,Func)self.Function=Func end}Fake.connect = Fake.Connect
		return Fake
	end
	local Mouse = {Target=nil,Hit=CFrame.new(),KeyUp=NewFakeEvent(),KeyDown=NewFakeEvent(),Button1Up=NewFakeEvent(),Button1Down=NewFakeEvent()}
	local UserInputService = {InputBegan=NewFakeEvent(),InputEnded=NewFakeEvent()}
	local ContextActionService = {Actions={},BindAction = function(self,actionName,Func,touch,...)
		self.Actions[actionName] = Func and {Name=actionName,Function=Func,Keys={...}} or nil
	end};ContextActionService.UnBindAction = ContextActionService.BindAction
	local function TriggerEvent(self,Event,...)
		local Trigger = Mouse[Event]
		if Trigger and Trigger.fakeEvent and Trigger.Function then
			Trigger.Function(...)
		end
	end
	Mouse.TrigEvent = TriggerEvent
	UserInputService.TrigEvent = TriggerEvent
	Event.OnServerEvent:Connect(function(FiredBy,Input)
		if FiredBy.Name ~= owner.Name then end
		if Input.MouseEvent then
			Mouse.Target = Input.Target
			Mouse.Hit = Input.Hit
		else
			local Begin = Input.UserInputState == Enum.UserInputState.Begin
			if Input.UserInputType == Enum.UserInputType.MouseButton1 then
				return Mouse:TrigEvent(Begin and "Button1Down" or "Button1Up")
			end
			for _,Action in pairs(ContextActionService.Actions) do
				for _,Key in pairs(Action.Keys) do
					if Key==Input.KeyCode then
						Action.Function(Action.Name,Input.UserInputState,Input)
					end
				end
			end
			Mouse:TrigEvent(Begin and "KeyDown" or "KeyUp",Input.KeyCode.Name:lower())
			UserInputService:TrigEvent(Begin and "InputBegan" or "InputEnded",Input,false)
		end
	end)
	InternalData["Mouse"] = Mouse
	InternalData["ContextActionService"] = ContextActionService
	InternalData["UserInputService"] = UserInputService
	Event.Parent = NLS([[
		local Player = owner
		local Event = script:WaitForChild("UserInput")
		local UserInputService = game:GetService("UserInputService")
		local Mouse = Player:GetMouse()
		local Input = function(Input,gameProcessedEvent)
			if gameProcessedEvent then return end
			Event:FireServer({KeyCode=Input.KeyCode,UserInputType=Input.UserInputType,UserInputState=Input.UserInputState})
		end
		UserInputService.InputBegan:Connect(Input)
		UserInputService.InputEnded:Connect(Input)
		local Hit,Target
		while wait(1/30) do
			if Hit ~= Mouse.Hit or Target ~= Mouse.Target then
				Hit,Target = Mouse.Hit,Mouse.Target
				Event:FireServer({["MouseEvent"]=true,["Target"]=Target,["Hit"]=Hit})
			end
		end
	]],owner.Character)
end
RealGame = game;game = setmetatable({},{
	__index = function (self,Index)
		local Sandbox = function (Thing)
			if Thing:IsA("Player") then
				local RealPlayer = Thing
				return setmetatable({},{
					__index = function (self,Index)
						local Type = type(RealPlayer[Index])
						if Type == "function" then
							if Index:lower() == "getmouse" or Index:lower() == "mouse" then
								return function (self)
									return InternalData["Mouse"]
								end
							end
							return function (self,...)
								return RealPlayer[Index](RealPlayer,...)
							end
						else
							if Index == "PlrObj" then
								return RealPlayer
							end
							return RealPlayer[Index]
						end
					end;
					__tostring = function(self)
						return RealPlayer.Name
					end
				})
			end
		end
		if RealGame[Index] then
			local Type = type(RealGame[Index])
			if Type == "function" then
				if Index:lower() == "getservice" or Index:lower() == "service" then
					return function (self,Service)
						if Service:lower() == "players" then
							return setmetatable({},{
								__index = function (self2,Index2)
									local RealService = RealGame:GetService(Service)
									local Type2 = type(Index2)
									if Type2 == "function" then
										return function (self,...)
											return RealService[Index2](RealService,...)
										end
									else
										if Index2:lower() == "localplayer" then
											return Sandbox(owner)
										end
										return RealService[Index2]
									end
								end;
								__tostring = function(self)
									return RealGame:GetService(Service).Name
								end
							})
						elseif Service:lower() == "contextactionservice" then
							return InternalData["ContextActionService"]
						elseif Service:lower() == "contextactionservice" then
							return InternalData["UserInputService"]
						elseif Service:lower() == "runservice" then
							return setmetatable({},{
								__index = function(self2,Index2)
									local RealService = RealGame:GetService(Service)
									local Type2 = type(Index2)
									if Type2 == "function" then
										return function (self,...)
											return RealService[Index2](RealService,...)
										end
									else
										if Index2:lower() == "bindtorenderstep" then
											return function (self,Name,Priority,Function)
												return RealGame:GetService("RunService").Stepped:Connect(Function)
											end
										end
										if Index2:lower() == "renderstepped" then
											return RealService["Stepped"]
										end
										return RealService[Index2]
									end
								end
							})
						else
							return RealGame:GetService(Service)
						end
					end
				end
				return function (self,...)
					return RealGame[Index](RealGame,...)
				end
			else
				if game:GetService(Index) then
					return game:GetService(Index)
				end
				return RealGame[Index]
			end
		else
			return nil
		end
	end
});Game = game;owner = game:GetService("Players").LocalPlayer;script = {}
print("Complete! Running...")


--//Paste script below this line.

--Converted with ttyyuu12345's model to script plugin v4
function sandbox(var,func)
	local env = getfenv(func)
	local newenv = setmetatable({},{
		__index = function(self,k)
			if k=="script" then
				return var
			else
				return env[k]
			end
		end,
	})
	setfenv(func,newenv)
	return func
end
cors = {}
mas = Instance.new("Model",game:GetService("Lighting"))
Script0 = Instance.new("Script")
ModuleScript1 = Instance.new("ModuleScript")
Script0.Name = "dic"
Script0.Parent = mas
table.insert(cors,sandbox(Script0,function()

local plr=script.Parent.Parent
local char=plr.Character
local hum=char:waitForChild"Humanoid"
local module=require(script:waitForChild"stickModule")
local pose="0"
local target=nil
local w=nil
local parts,last = {}
local cheek,cheek2
local clothes,pants,shirt=true,char:waitForChild("Pants"),char:waitForChild("Shirt")
local fx=false



function weld(e)
	local function scan(parent)
		for _,v in pairs(parent:GetChildren()) do
			if (v:IsA("BasePart")) then
				if (last) then
					local w = Instance.new("Weld")
					w.Name = ("%s_Weld"):format(v.Name)
					w.Part0,w.Part1 = last,v
					w.C0 = last.CFrame:inverse()
					w.C1 = v.CFrame:inverse()
					w.Parent = last
				end
				last = v
				table.insert(parts,v)
			end
			scan(v)
		end
	end
	scan(e)
end


function createStick(char)
	wait(.5)
	char["Left Arm"].BrickColor=BrickColor.new("Pastel brown")
	char["Right Arm"].BrickColor=BrickColor.new("Pastel brown")
	char["Left Leg"].BrickColor=BrickColor.new("Pastel brown")
	char["Right Leg"].BrickColor=BrickColor.new("Pastel brown")
	char["Torso"].BrickColor=BrickColor.new("Pastel brown")
	char["Head"].BrickColor=BrickColor.new("Pastel brown")	
	local stick=module(char)
    weld(stick)
	for _,v in pairs(parts) do
		v.Anchored = false
		v.CanCollide=false
		v.Transparency=1
	end
	local w=Instance.new("Weld",stick)
	w.Part0=char.Torso
	w.Part1=stick	.hitbox
	w.C0=CFrame.new(0,-1,-1)*CFrame.Angles(0,math.rad(90),0)
	cheek=Instance.new("Part",char)
	cheek.Name="nice stiff cheek"
	cheek.BrickColor=BrickColor.new("Pastel brown")
	cheek.Material=Enum.Material.SmoothPlastic
	cheek.Shape="Ball"
	cheek.CanCollide=false
	cheek.Size=Vector3.new(1.16,1.16,1.16)
	cheek.Transparency=1
	cheek2=Instance.new("Part",char)
	cheek2.Name="nice stiff cheek"
	cheek2.BrickColor=BrickColor.new("Pastel brown")
	cheek2.Material=Enum.Material.SmoothPlastic
	cheek2.Shape="Ball"
	cheek2.CanCollide=false
	cheek2.Size=Vector3.new(1.16,1.16,1.16)
	cheek2.Transparency=1
	local w1=Instance.new("Weld",cheek)
	w1.Part0=char.Torso
	w1.Part1=cheek
	w1.C0=CFrame.new(.5,-1,.56)
	local w2=Instance.new("Weld",cheek2)
	w2.Part0=char.Torso
	w2.Part1=cheek2
	w2.C0=CFrame.new(-.5,-1,.56)
end


wait()
createStick(char)


end))
ModuleScript1.Name = "stickModule"
ModuleScript1.Parent = Script0
table.insert(cors,sandbox(ModuleScript1,function()
local partsWithId = {}
local awaitRef = {}

local root = {
	ID = 0;
	Type = "Model";
	Properties = {
		Name = "fat throbbing dick";
	};
	Children = {
		{
			ID = 1;
			Type = "Part";
			Properties = {
				BottomSurface = Enum.SurfaceType.Smooth;
				Color = Color3.new(78/85,184/255,146/255);
				CFrame = CFrame.new(6.5021224021912,1.9099999666214,-3.1208500862122,1,0,0,0,0.99999964237213,0,0,0,1);
				brickColor = BrickColor.new(78/85,184/255,146/255);
				Position = Vector3.new(6.5021224021912,1.9099999666214,-3.1208500862122);
				BrickColor = BrickColor.new(78/85,184/255,146/255);
				Material = Enum.Material.SmoothPlastic;
				Size = Vector3.new(0.64770662784576,0.75565761327744,0.70168209075928);
				TopSurface = Enum.SurfaceType.Smooth;
			};
			Children = {
				{
					ID = 2;
					Type = "SpecialMesh";
					Properties = {
						MeshType = Enum.MeshType.Sphere;
					};
					Children = {};
				};
				{
					ID = 3;
					Type = "ManualWeld";
					Properties = {
						C1 = CFrame.new(-0.44259881973267,0,0.080963134765625,1,0,0,0,0.99999988079071,0,0,0,1);
						Part1 = "_R:10_";
						Name = "Weld";
						Part0 = "_R:1_";
					};
					Children = {};
				};
			};
		};
		{
			ID = 4;
			Type = "Part";
			Properties = {
				BottomSurface = Enum.SurfaceType.Smooth;
				Color = Color3.new(78/85,184/255,146/255);
				CFrame = CFrame.new(6.9879021644592,1.9099999666214,-3.1208500862122,1,0,0,0,0.99999964237213,0,0,0,1);
				brickColor = BrickColor.new(78/85,184/255,146/255);
				Position = Vector3.new(6.9879021644592,1.9099999666214,-3.1208500862122);
				BrickColor = BrickColor.new(78/85,184/255,146/255);
				Material = Enum.Material.SmoothPlastic;
				Size = Vector3.new(0.64770662784576,0.75565761327744,0.70168209075928);
				TopSurface = Enum.SurfaceType.Smooth;
			};
			Children = {
				{
					ID = 5;
					Type = "SpecialMesh";
					Properties = {
						MeshType = Enum.MeshType.Sphere;
					};
					Children = {};
				};
				{
					ID = 6;
					Type = "ManualWeld";
					Properties = {
						C1 = CFrame.new(0.0431809425354,0,0.080963134765625,1,0,0,0,0.99999988079071,0,0,0,1);
						Part1 = "_R:10_";
						Name = "Weld";
						Part0 = "_R:4_";
					};
					Children = {};
				};
			};
		};
		{
			ID = 7;
			Type = "Part";
			Properties = {
				BottomSurface = Enum.SurfaceType.Smooth;
				Color = Color3.new(78/85,184/255,146/255);
				CFrame = CFrame.new(6.5453028678894,1.9099999666214,-3.2018132209778,1,0,0,0,0.99999964237213,0,0,0,1);
				brickColor = BrickColor.new(78/85,184/255,146/255);
				Position = Vector3.new(6.5453028678894,1.9099999666214,-3.2018132209778);
				BrickColor = BrickColor.new(78/85,184/255,146/255);
				Material = Enum.Material.SmoothPlastic;
				Size = Vector3.new(0.56134581565857,0.75565761327744,0.626116335392);
				TopSurface = Enum.SurfaceType.Smooth;
			};
			Children = {
				{
					ID = 8;
					Type = "SpecialMesh";
					Properties = {
						MeshType = Enum.MeshType.Sphere;
					};
					Children = {};
				};
				{
					ID = 9;
					Type = "ManualWeld";
					Properties = {
						C1 = CFrame.new(-0.39941835403442,0,0,1,0,0,0,0.99999988079071,0,0,0,1);
						Part1 = "_R:10_";
						Name = "Weld";
						Part0 = "_R:7_";
					};
					Children = {};
				};
			};
		};
		{
			ID = 10;
			Type = "Part";
			Properties = {
				BottomSurface = Enum.SurfaceType.Smooth;
				Color = Color3.new(78/85,184/255,146/255);
				CFrame = CFrame.new(6.9447212219238,1.9099999666214,-3.2018132209778,1,0,0,0,0.99999976158142,0,0,0,1);
				brickColor = BrickColor.new(78/85,184/255,146/255);
				Position = Vector3.new(6.9447212219238,1.9099999666214,-3.2018132209778);
				BrickColor = BrickColor.new(78/85,184/255,146/255);
				Material = Enum.Material.SmoothPlastic;
				Size = Vector3.new(0.56134581565857,0.75565761327744,0.626116335392);
				TopSurface = Enum.SurfaceType.Smooth;
			};
			Children = {
				{
					ID = 11;
					Type = "SpecialMesh";
					Properties = {
						MeshType = Enum.MeshType.Sphere;
					};
					Children = {};
				};
			};
		};
		{
			ID = 12;
			Type = "Part";
			Properties = {
				BottomSurface = Enum.SurfaceType.Smooth;
				Color = Color3.new(78/85,184/255,146/255);
				CFrame = CFrame.new(6.7719993591309,1.9099999666214,-3.2503912448883,1,0,0,0,0.99999976158142,0,0,0,1);
				brickColor = BrickColor.new(78/85,184/255,146/255);
				Position = Vector3.new(6.7719993591309,1.9099999666214,-3.2503912448883);
				BrickColor = BrickColor.new(78/85,184/255,146/255);
				Material = Enum.Material.SmoothPlastic;
				Size = Vector3.new(0.56134581565857,0.64770650863647,0.72327226400375);
				TopSurface = Enum.SurfaceType.Smooth;
			};
			Children = {
				{
					ID = 13;
					Type = "SpecialMesh";
					Properties = {
						MeshType = Enum.MeshType.Sphere;
					};
					Children = {};
				};
				{
					ID = 14;
					Type = "ManualWeld";
					Properties = {
						C1 = CFrame.new(-0.17272186279297,0,-0.048578023910522,1,0,0,0,1,0,0,0,1);
						Part1 = "_R:10_";
						Name = "Weld";
						Part0 = "_R:12_";
					};
					Children = {};
				};
			};
		};
		{
			ID = 15;
			Type = "Part";
			Properties = {
				BottomSurface = Enum.SurfaceType.Smooth;
				Color = Color3.new(78/85,184/255,146/255);
				CFrame = CFrame.new(6.7719993591309,1.9099999666214,-3.282776594162,-4.3711388286738e-08,0,1,0,0.99999958276749,0,-1,0,-4.3711388286738e-08);
				Rotation = Vector3.new(0,90,0);
				BrickColor = BrickColor.new(78/85,184/255,146/255);
				brickColor = BrickColor.new(78/85,184/255,146/255);
				Position = Vector3.new(6.7719993591309,1.9099999666214,-3.282776594162);
				Orientation = Vector3.new(0,90,0);
				Material = Enum.Material.SmoothPlastic;
				Size = Vector3.new(0.62611639499664,0.36703372001648,0.72327226400375);
				TopSurface = Enum.SurfaceType.Smooth;
			};
			Children = {
				{
					ID = 16;
					Type = "SpecialMesh";
					Properties = {
						MeshType = Enum.MeshType.Cylinder;
					};
					Children = {};
				};
				{
					ID = 17;
					Type = "ManualWeld";
					Properties = {
						Part1 = "_R:10_";
						Name = "Weld";
						Part0 = "_R:15_";
						C0 = CFrame.new(0,0,0,-4.3711388286738e-08,0,-1,0,0.99999994039536,0,1,0,-4.3711388286738e-08);
						C1 = CFrame.new(-0.17272186279297,0,-0.080963373184204,1,0,0,0,0.99999988079071,0,0,0,1);
					};
					Children = {};
				};
			};
		};
		{
			ID = 18;
			Type = "Part";
			Properties = {
				BottomSurface = Enum.SurfaceType.Smooth;
				Color = Color3.new(78/85,184/255,146/255);
				CFrame = CFrame.new(6.7719993591309,1.9099999666214,-3.660605430603,-4.3711388286738e-08,0,1,0,0.99999970197678,0,-1,0,-4.3711388286738e-08);
				Rotation = Vector3.new(0,90,0);
				BrickColor = BrickColor.new(78/85,184/255,146/255);
				brickColor = BrickColor.new(78/85,184/255,146/255);
				Position = Vector3.new(6.7719993591309,1.9099999666214,-3.660605430603);
				Orientation = Vector3.new(0,90,0);
				Material = Enum.Material.SmoothPlastic;
				Size = Vector3.new(1.3817738294601,0.34544348716736,0.72327226400375);
				TopSurface = Enum.SurfaceType.Smooth;
			};
			Children = {
				{
					ID = 19;
					Type = "SpecialMesh";
					Properties = {
						MeshType = Enum.MeshType.Cylinder;
					};
					Children = {};
				};
				{
					ID = 20;
					Type = "ManualWeld";
					Properties = {
						Part1 = "_R:10_";
						Name = "Weld";
						Part0 = "_R:18_";
						C0 = CFrame.new(0,0,0,-4.3711388286738e-08,0,-1,0,0.99999994039536,0,1,0,-4.3711388286738e-08);
						C1 = CFrame.new(-0.17272186279297,0,-0.45879220962524,1,0,0,0,1,0,0,0,1);
					};
					Children = {};
				};
			};
		};
		{
			ID = 21;
			Type = "Part";
			Properties = {
				BottomSurface = Enum.SurfaceType.Smooth;
				Color = Color3.new(212/255,48/85,63/85);
				CFrame = CFrame.new(6.7719993591309,1.9099999666214,-4.2921190261841,-4.3711388286738e-08,0,1,0,0.99999958276749,0,-1,0,-4.3711388286738e-08);
				Rotation = Vector3.new(0,90,0);
				BrickColor = BrickColor.new(212/255,48/85,63/85);
				brickColor = BrickColor.new(212/255,48/85,63/85);
				Position = Vector3.new(6.7719993591309,1.9099999666214,-4.2921190261841);
				Orientation = Vector3.new(0,90,0);
				Material = Enum.Material.SmoothPlastic;
				Size = Vector3.new(0.46418961882591,0.34544348716736,0.3346483707428);
				TopSurface = Enum.SurfaceType.Smooth;
			};
			Children = {
				{
					ID = 22;
					Type = "SpecialMesh";
					Properties = {
						MeshType = Enum.MeshType.Sphere;
					};
					Children = {};
				};
				{
					ID = 23;
					Type = "ManualWeld";
					Properties = {
						Part1 = "_R:10_";
						Name = "Weld";
						Part0 = "_R:21_";
						C0 = CFrame.new(0,0,0,-4.3711388286738e-08,0,-1,0,0.99999994039536,0,1,0,-4.3711388286738e-08);
						C1 = CFrame.new(-0.17272186279297,0,-1.0903058052063,1,0,0,0,0.99999988079071,0,0,0,1);
					};
					Children = {};
				};
			};
		};
		{
			ID = 24;
			Type = "Part";
			Properties = {
				BottomSurface = Enum.SurfaceType.Smooth;
				Color = Color3.new(1,89/255,89/255);
				CFrame = CFrame.new(6.7719993591309,1.9099999666214,-4.2975163459778,-4.3711388286738e-08,0,1,0,0.99999958276749,0,-1,0,-4.3711388286738e-08);
				Rotation = Vector3.new(0,90,0);
				BrickColor = BrickColor.new(1,89/255,89/255);
				brickColor = BrickColor.new(1,89/255,89/255);
				Position = Vector3.new(6.7719993591309,1.9099999666214,-4.2975163459778);
				Orientation = Vector3.new(0,90,0);
				Material = Enum.Material.SmoothPlastic;
				Size = Vector3.new(0.4749847650528,0.30226305127144,0.11874623596668);
				TopSurface = Enum.SurfaceType.Smooth;
			};
			Children = {
				{
					ID = 25;
					Type = "SpecialMesh";
					Properties = {
						MeshType = Enum.MeshType.Sphere;
					};
					Children = {};
				};
				{
					ID = 26;
					Type = "ManualWeld";
					Properties = {
						Part1 = "_R:10_";
						Name = "Weld";
						Part0 = "_R:24_";
						C0 = CFrame.new(0,0,0,-4.3711388286738e-08,0,-1,0,0.99999994039536,0,1,0,-4.3711388286738e-08);
						C1 = CFrame.new(-0.17272186279297,0,-1.095703125,1,0,0,0,0.99999988079071,0,0,0,1);
					};
					Children = {};
				};
			};
		};
		{
			ID = 27;
			Type = "Part";
			Properties = {
				BottomSurface = Enum.SurfaceType.Smooth;
				Color = Color3.new(1,89/255,89/255);
				CFrame = CFrame.new(6.7299995422363,1.9850064516068,-3.6049997806549,-4.3711388286738e-08,0,1,0,0.99999994039536,0,-1,0,-4.3711388286738e-08);
				BrickColor = BrickColor.new(1,89/255,89/255);
				Size = Vector3.new(1.9100000858307,0.71000003814697,1.1600000858307);
				Rotation = Vector3.new(0,90,0);
				Transparency = 1;
				Name = "hitbox";
				Position = Vector3.new(6.7299995422363,1.9850064516068,-3.6049997806549);
				Orientation = Vector3.new(0,90,0);
				Material = Enum.Material.SmoothPlastic;
				brickColor = BrickColor.new(1,89/255,89/255);
				TopSurface = Enum.SurfaceType.Smooth;
			};
			Children = {
				{
					ID = 28;
					Type = "ManualWeld";
					Properties = {
						Part1 = "_R:10_";
						Name = "Weld";
						Part0 = "_R:27_";
						C0 = CFrame.new(0,0,0,-4.3711388286738e-08,0,-1,0,0.99999994039536,0,1,0,-4.3711388286738e-08);
						C1 = CFrame.new(-0.2147216796875,0.075006484985352,-0.40318655967712,1,0,0,0,0.99999988079071,0,0,0,1);
					};
					Children = {};
				};
			};
		};
	};
};

local function Scan(item, parent)
	local obj = Instance.new(item.Type)
	if (item.ID) then
		local awaiting = awaitRef[item.ID]
		if (awaiting) then
			awaiting[1][awaiting[2]] = obj
			awaitRef[item.ID] = nil
		else
			partsWithId[item.ID] = obj
		end
	end
	for p,v in pairs(item.Properties) do
		if (type(v) == "string") then
			local id = tonumber(v:match("^_R:(%w+)_$"))
			if (id) then
				if (partsWithId[id]) then
					v = partsWithId[id]
				else
					awaitRef[id] = {obj, p}
					v = nil
				end
			end
		end
		obj[p] = v
	end
	for _,c in pairs(item.Children) do
		Scan(c, obj)
	end
	obj.Parent = parent
	return obj
end

return function(parent) return Scan(root,parent)end
end))
for i,v in pairs(mas:GetChildren()) do
	v.Parent = workspace
	pcall(function() v:MakeJoints() end)
end
mas:Destroy()
for i,v in pairs(cors) do
	spawn(function()
		pcall(v)
	end)
end
